diff --git a/MCParticleHelper.cxx b/MCParticleHelper.cxx
index 581ee09..a923d7b 100644
--- a/MCParticleHelper.cxx
+++ b/MCParticleHelper.cxx
@@ -164,6 +164,7 @@ namespace supera {
     LARCV_DEBUG() <<"***--- TrackID" << mcs.TrackID() << "*********------- first_step shower"<<first_step.X()<<","<<first_step.Y()<<","<<first_step.Z()<<std::endl;
     if (_apply_sce) ApplySCE(xyz);
     res.first_step(xyz[0], xyz[1], xyz[2], first_step.T());
+    
 
     res.momentum(mcs.Start().Px(), mcs.Start().Py(), mcs.Start().Pz());
     res.pdg_code(mcs.PdgCode());
@@ -176,6 +177,9 @@ namespace supera {
     xyz[2] = mcs.MotherStart().Z();
     if (_apply_sce) ApplySCE(xyz);
     res.parent_position(xyz[0], xyz[1], xyz[2], mcs.MotherStart().T());
+
+    //std::cout<<"**-- MCPartHelper start x,y,z ancestor x,y,z : " << res.x() << " , " << res.y() << " , " << res.z() << " , " << res.ancestor_x() << " , " << res.ancestor_y() << " , " << res.ancestor_z() << std::endl;
+
     /*
     res.parent_momentum(mcs.MotherStart().Px(),
                         mcs.MotherStart().Py(),
diff --git a/SuperaMCParticleCluster.cxx b/SuperaMCParticleCluster.cxx
index 000dd2e..c820b25 100644
--- a/SuperaMCParticleCluster.cxx
+++ b/SuperaMCParticleCluster.cxx
@@ -48,7 +48,9 @@ namespace larcv {
     // If we want to use SED, we have the option
     // to use SEDLite.
     _use_sed = cfg.get<bool>("UseSimEnergyDeposit", true);
-    _use_sed_lite = cfg.get<bool>("UseSimEnergyDepositLite", false);
+    _use_sed_lite = cfg.get<bool>("UseSimEnergyDepositLite", true);
+
+    std::cout<<"Use sed lite ? " << _use_sed_lite << " use sed ? "<< _use_sed << std::endl;
 
     _use_sed_points = cfg.get<bool>("UseSimEnergyDepositPoints");
     _store_dedx = cfg.get<bool>("StoreDEDX",false);
@@ -56,7 +58,7 @@ namespace larcv {
     _check_particle_validity = cfg.get<bool>("CheckParticleValidity",true);
     _merge_shower_delta = cfg.get<bool>("MergeShowerDelta", true);
 
-    _useOrigTrackID = cfg.get<bool>("UseOrigTrackID", false);
+    _useOrigTrackID = cfg.get<bool>("UseOrigTrackID", true);
 
     auto cryostat_v   = cfg.get<std::vector<unsigned short> >("CryostatList");
     auto tpc_v        = cfg.get<std::vector<unsigned short> >("TPCList"     );
@@ -191,6 +193,7 @@ namespace larcv {
 
       if(mother_index >= 0)
         grp.part.parent_pdg_code(parent_pdg_v[index]);
+      std::cout << "grp trk id in create groups : " << grp.part.track_id() << std::endl;
       grp.valid=true;
 
       if(pdg_code == 22 || pdg_code == 11) {
@@ -229,9 +232,10 @@ namespace larcv {
           grp.type = supera::kNeutron;
         result[track_id] = grp;
       }
-      LARCV_DEBUG() << "***--- first_step in for loop " << grp.part.first_step().x() <<
+      std::cout << "***--- first_step in for loop " << grp.part.first_step().x() <<
       "Track ID " << grp.part.track_id() << " PDG " << grp.part.pdg_code() << " " << grp.part.creation_process()
-         <<" ... parent Track ID " << grp.part.parent_track_id() << " PDG " << grp.part.parent_pdg_code() << std::endl;
+         <<" ... parent Track ID " << grp.part.parent_track_id() << " PDG " << grp.part.parent_pdg_code() << 
+         " ... ancestor x,pdg : " << grp.part.ancestor_x() << " , " << grp.part.ancestor_pdg_code() << std::endl;
       
     }
 
@@ -244,6 +248,10 @@ namespace larcv {
               std::vector<supera::ParticleGroup>& part_grp_v,
               larcv::IOManager& mgr)
   {
+    /*
+    Bear c 7/26/23 - I'm not sure what this code does, but it appears to make a mapping
+    for sed points
+    */
     //std::set<size_t> ctr_a, ctr_b;
     auto const& sedep_v = LArData<sed_type>();
     auto const& trackid2index = _mcpl.TrackIdToIndex();
@@ -261,15 +269,15 @@ namespace larcv {
       auto const& sedep = sedep_v.at(sedep_idx);
 
       VoxelID_t vox_id = meta.id(sedep.X(), sedep.Y(), sedep.Z());
-      int track_id = abs(sedep.TrackID());
+      int track_id = abs(sedep.TrackID()); // do we need the option to use origTrackID??
       if(vox_id == larcv::kINVALID_VOXELID || !_world_bounds.contains(sedep.X(),sedep.Y(),sedep.Z())) {
-        LARCV_DEBUG() << "Skipping sedep from track id " << track_id
+        std::cout << "Skipping sedep from track id " << track_id
                 << " E=" << sedep.Energy()
                 << " pos=(" << sedep.X() << "," << sedep.Y() << "," << sedep.Z() << ")" << std::endl;
         continue;
       }
       //ctr_a.insert(vox_id);
-      LARCV_DEBUG() << "Recording sedep from track id " << track_id
+      std::cout << "Recording sedep from track id " << track_id
         << " E=" << sedep.Energy() << std::endl;
 
       supera::EDep pt;
@@ -365,9 +373,17 @@ namespace larcv {
     double tmin,tmax,xmax,xmin;
     xmin=tmin=1.e20;
     xmax=tmax=-1.e20;
+    std::cout << "sedep_v.size() : " << sedep_v.size() << std::endl;
     for(size_t sedep_idx=0; sedep_idx<sedep_v.size(); ++sedep_idx) {
       auto const& sedep = sedep_v.at(sedep_idx);
 
+      std::cout<<"sed first last step x,y,z,t,e : " 
+      << sedep.X() << " , "
+      << sedep.Y() << " , "
+      << sedep.Z() << " , "
+      << sedep.T() << " , "
+      << sedep.Energy() << " , " << std::endl;
+
       VoxelID_t vox_id = meta.id(sedep.X(), sedep.Y(), sedep.Z());
       if(vox_id == larcv::kINVALID_VOXELID || !_world_bounds.contains(sedep.X(),sedep.Y(),sedep.Z()))
         continue;
@@ -386,7 +402,22 @@ namespace larcv {
       tmax = std::max(pt.t,tmax);
       xmin = std::min(pt.x,xmin);
       xmax = std::max(pt.x,xmax);
+      //std::cout << "sed x,y,z,t,z : " << pt.x << "," << pt.y << "," << pt.z << "," << pt.t << "," << pt.e <<std::endl;
       part_grp_v[track_id].AddEDep(pt);
+      std::cout<<"part_grp_v first x,y,z,e,dedx : "
+      << part_grp_v[track_id].first_pt.x << " , "
+      << part_grp_v[track_id].first_pt.y << " , "
+      << part_grp_v[track_id].first_pt.z << " , "
+      << part_grp_v[track_id].first_pt.t << " , "
+      << part_grp_v[track_id].first_pt.e << " , "
+      << part_grp_v[track_id].first_pt.dedx << " , "
+      << "last_pt : "
+      << part_grp_v[track_id].last_pt.x << " , "
+      << part_grp_v[track_id].last_pt.y << " , "
+      << part_grp_v[track_id].last_pt.z << " , "
+      << part_grp_v[track_id].last_pt.t << " , "
+      << part_grp_v[track_id].last_pt.e << " , "
+      << part_grp_v[track_id].last_pt.dedx << std::endl;
 
     }
     /*
@@ -488,6 +519,8 @@ namespace larcv {
           }
           */
           int track_id = abs(_useOrigTrackID ? edep.origTrackID : edep.trackID);
+          std::cout << "trackID : " << edep.trackID
+          << "origTrackID : " << edep.origTrackID << std::endl;
           if(track_id >= ((int)(trackid2index.size()))) {
             ++ctr_missing_trackid;
             missing_trackid.insert(track_id);
@@ -1148,12 +1181,12 @@ namespace larcv {
 
     // Build MCParticle List
     auto const& larmcp_v = LArData<supera::LArMCParticle_t>();
-    std::cout << "larmcp_v size = " << larmcp_v.size() << std::endl;
-    for (auto const& mcp : larmcp_v){
-      LARCV_DEBUG() << "*****----- particle : "
-      " track " << mcp.TrackId() << " , " <<
-      std::endl;
-    }
+    //std::cout << "larmcp_v size = " << larmcp_v.size() << std::endl;
+    // for (auto const& mcp : larmcp_v){
+    //   std::cout << "*****----- particle : "
+    //   " track " << mcp.TrackId() << " , " <<
+    //   std::endl;
+    // }
     auto const *ev = GetEvent();
     _mcpl.Update(larmcp_v,ev->id().run(),ev->id().event());
 
@@ -1164,8 +1197,10 @@ namespace larcv {
 
     // Fill Voxel Information
     LARCV_INFO() << "Analyzing SimChannel/SimEnergyDeposit" << std::endl;
-    if(_use_sed) {
+    if(_use_sed) { // add or statement to access the sed_lite analyze sed?
+      std::cout << "either or!! " <<std::endl;
       if (_use_sed_lite) {
+        std::cout << "analyze sed_lite!" << std::endl;
         this->AnalyzeSimEnergyDeposit<supera::LArSimEnergyDepositLite_t>(meta3d, part_grp_v, mgr);
       } else {
         this->AnalyzeSimEnergyDeposit<supera::LArSimEnergyDeposit_t>(meta3d, part_grp_v, mgr);
@@ -1182,6 +1217,15 @@ namespace larcv {
         this->AnalyzeFirstLastStep<supera::LArSimEnergyDeposit_t>(meta3d, part_grp_v);
       }
     }
+
+    for(auto& grp : part_grp_v) {
+      auto const& first_pt = grp.first_pt;
+      auto const& last_pt  = grp.last_pt;
+      if (first_pt.x != larcv::kINVALID_DOUBLE){
+        std::cout<<"just filled first_pt x,y,z,t " << first_pt.x<< " " << first_pt.y << " " << first_pt.z << " " << first_pt.t << std::endl;
+        std::cout<<"just filled last_pt x,y,z,t " << last_pt.x<< " " << last_pt.y << " " << last_pt.z << " " << last_pt.t << std::endl;
+      }
+    }
     /*
     std::cout<< "Listing non-zero voxel particles..." << std::endl;
     for(auto const& grp : part_grp_v) {
@@ -1230,7 +1274,7 @@ namespace larcv {
     // Merge touching LEScatter showers
     LARCV_INFO() << "Merging: touching LEScatters" << std::endl;
     this->MergeShowerTouchingLEScatter(meta3d,part_grp_v);
-    /*
+    
     std::cout<< "Listing non-zero voxel particles..." << std::endl;
     for(auto const& grp : part_grp_v) {
       if(grp.vs.size() < 1) continue;
@@ -1238,17 +1282,17 @@ namespace larcv {
          << " " << grp.part.creation_process() << " " << grp.vs.size() << " voxels"
          <<" ... parent Track ID " << grp.part.parent_track_id() << " PDG " << grp.part.parent_pdg_code() << std::endl;
     }
-    */
+    
     // Assign output IDs
     // For particles in MCShower/MCTrack collection, make sure to keep them
-    std::set<unsigned int> mcs_trackid_s;
+    std::set<unsigned int> mcs_trackid_s; //Why don't we do this for tracks???
     auto const& mcs_v = LArData<supera::LArMCShower_t>();
     for(auto const& mcs : mcs_v) {mcs_trackid_s.insert(mcs.TrackID());}
     for(auto const& mcs : mcs_v) {LARCV_DEBUG() << "MCShower " << mcs.TrackID() << std::endl;}
     std::vector<int> trackid2output(trackid2index.size(),-1);
     std::vector<int> output2trackid;
     output2trackid.reserve(trackid2index.size());
-    LARCV_DEBUG() << "Filling output2trackid - part_grp_v size = " << part_grp_v.size() << std::endl;
+    std::cout << "Filling output2trackid - part_grp_v size = " << part_grp_v.size() << std::endl;
     for(size_t trackid=0; trackid<part_grp_v.size(); trackid++) {
       auto& grp = part_grp_v[trackid];
       grp.part.energy_deposit((grp.vs.size() ? grp.vs.sum() : 0.));
@@ -1258,8 +1302,8 @@ namespace larcv {
         grp.valid=true;
         grp.part.group_id(output_counter);
       }
-      else{ // Fix this by setting UseOrigTrackID: false in superaMCParticleCluster fcl
-        LARCV_DEBUG() << "***--- Laura debug " << grp.part.track_id() << " " << grp.valid << " " << grp.size_all() << " " << grp.shape() << " " << larcv::kShapeLEScatter << trackid << std::endl;
+      else{ 
+        std::cout << "***--- Laura debug " << grp.part.track_id() << " " << grp.valid << " " << grp.size_all() << " " << grp.shape() << " " << larcv::kShapeLEScatter << trackid << std::endl;
         
         if(!grp.valid) continue;
         if(grp.size_all()<1) continue;
@@ -1267,7 +1311,7 @@ namespace larcv {
       }
 
       //std::cout << grp.shape() << " " << grp.size_all() << std::endl;
-      LARCV_DEBUG() << "***--- track id in particle group : " << grp.part.track_id() << " "<< larcv::kINVALID_UINT << std::endl;
+      std::cout << "***--- track id in particle group : " << grp.part.track_id() << " "<< larcv::kINVALID_UINT << std::endl;
       if (grp.part.track_id() == larcv::kINVALID_UINT) continue;
       grp.part.id(output_counter);
       trackid2output[grp.part.track_id()] = output_counter;
@@ -1309,7 +1353,8 @@ namespace larcv {
       auto& part = grp.part;
       auto const& first_pt = grp.first_pt;
       auto const& last_pt  = grp.last_pt;
-      //std::cout<<first_pt.x<< " " << first_pt.y << " " << first_pt.z << std::endl;
+      std::cout<<"first_pt x,y,z,t " << first_pt.x<< " " << first_pt.y << " " << first_pt.z << " " << first_pt.t << std::endl;
+      std::cout<<"last_pt x,y,z,t " << last_pt.x<< " " << last_pt.y << " " << last_pt.z << " " << last_pt.t << std::endl;
       if(first_pt.t != larcv::kINVALID_DOUBLE)
         part.first_step(first_pt.x,first_pt.y,first_pt.z,first_pt.t);
       if(last_pt.t  != larcv::kINVALID_DOUBLE)
@@ -1320,16 +1365,31 @@ namespace larcv {
     // loop over MCShower to assign parent/ancestor information
     LARCV_INFO() << "Processing MCShower array: " << mcs_v.size() << std::endl;
     for(auto const& mcs : mcs_v) {
-      int track_id = mcs.TrackID();
+      int track_id = mcs.TrackID();        
       if(track_id >= ((int)(trackid2output.size()))) {
         LARCV_INFO() << "MCShower " << track_id << " PDG " << mcs.PdgCode()
                << " not found in output group..." << std::endl;
         continue;
       }
       int output_id = trackid2output[track_id];
+              std::cout << "*****----- shower in for loop: "<< output_id << " -- " << "track id " << track_id << 
+      " mother information " << mcs.MotherStart().X() <<" , "<<
+               mcs.MotherStart().Y() << " , " <<
+               mcs.MotherStart().Z() << " , " <<
+      " ancestor " << mcs.AncestorStart().X() <<" , "<<
+               mcs.AncestorStart().Y() << " , " <<
+               mcs.AncestorStart().Z() << " , " <<
+               mcs.AncestorTrackID() << " , " <<
+               mcs.AncestorPdgCode() << " , " <<
+      " track " << mcs.Start().X() <<" , "<<
+               mcs.Start().Y() << " , " <<
+               mcs.Start().Z() << " , " <<
+               mcs.TrackID() << " , " <<
+               mcs.PdgCode() << " , " <<
+      std::endl;
       //int group_id  = -1;
       int group_id  = output_id;
-      if(output_id >= 0) {
+      if(output_id >= 0) { // >= 0
         auto& grp = part_grp_v[track_id];
         assert(grp.part.group_id() == larcv::kINVALID_INSTANCEID);
         grp.part.group_id(group_id);
@@ -1343,7 +1403,7 @@ namespace larcv {
         }
         */
         // see if first step is not set yet
-        LARCV_DEBUG() << "*****----- shower ancestor before output id: "<< output_id << " -- " << "track id " << track_id << 
+        std::cout << "*****----- shower ancestor after output id: "<< output_id << " -- " << "track id " << track_id << 
       " mother information " << mcs.MotherStart().X() <<" , "<<
                mcs.MotherStart().Y() << " , " <<
                mcs.MotherStart().Z() << " , " <<
@@ -1360,7 +1420,7 @@ namespace larcv {
       std::endl;
         if(grp.first_pt.t == larcv::kINVALID_DOUBLE)
           grp.part.first_step(mcs.DetProfile().X(),mcs.DetProfile().Y(),mcs.DetProfile().Z(),mcs.DetProfile().T());
-        std::cout<<mcs.DetProfile().T()<<std::endl;
+        //std::cout<<mcs.DetProfile().T()<<std::endl;
         grp.part.parent_position(mcs.MotherStart().X(),
                mcs.MotherStart().Y(),
                mcs.MotherStart().Z(),
@@ -1377,6 +1437,7 @@ namespace larcv {
 
       for(auto const& child : mcs.DaughterTrackID()) {
         //if(child < trackid2output.size() && trackid2output[child] < 0)
+        std::cout<< "**-- Filling shower daugter info, child id :  " << child << " , trackid2output : "<<trackid2output[child] << std::endl;
         if(child < trackid2output.size() && trackid2output[child] >= 0) {
           trackid2output[child] = output_id;
           auto& grp = part_grp_v[child];
@@ -1407,15 +1468,15 @@ namespace larcv {
     auto const& mct_v = LArData<supera::LArMCTrack_t>();
     LARCV_INFO() << "Processing MCTrack array: " << mct_v.size() << std::endl;
     //for (auto const& out_id : trackid2output){
-    //  LARCV_DEBUG() << "***--- out_id " << out_id << std::endl;
+    //  std::cout << "***--- out_id " << out_id << std::endl;
     //}
     for(auto const& mct : mct_v) {
       int track_id  = mct.TrackID();
       int output_id = trackid2output[track_id];
 
-      //int group_id  = -1;
+      //int output_id  = 1;
       int group_id  = output_id;
-      LARCV_DEBUG() << "*****----- track ancestor before output id: "<< output_id << " -- " << "track id " << track_id << 
+      std::cout << "*****----- track ancestor before output id: "<< output_id << " -- " << "track id " << track_id << 
       " mother information " << mct.MotherStart().X() <<" , "<<
                mct.MotherStart().Y() << " , " <<
                mct.MotherStart().Z() << " , " <<
@@ -1431,6 +1492,21 @@ namespace larcv {
                mct.PdgCode() << " , " <<
       std::endl;
       if(output_id >= 0) {
+        std::cout << "*****----- track ancestor after output id: "<< output_id << " -- " << "track id " << track_id << 
+        " mother information " << mct.MotherStart().X() <<" , "<<
+                mct.MotherStart().Y() << " , " <<
+                mct.MotherStart().Z() << " , " <<
+        " ancestor " << mct.AncestorStart().X() <<" , "<<
+                mct.AncestorStart().Y() << " , " <<
+                mct.AncestorStart().Z() << " , " <<
+                mct.AncestorTrackID() << " , " <<
+                mct.AncestorPdgCode() << " , " <<
+        " track " << mct.Start().X() <<" , "<<
+                mct.Start().Y() << " , " <<
+                mct.Start().Z() << " , " <<
+                mct.TrackID() << " , " <<
+                mct.PdgCode() << " , " <<
+        std::endl;
         auto& grp = part_grp_v[track_id];
         assert(grp.part.group_id() == larcv::kINVALID_INSTANCEID);
         /*
@@ -1440,7 +1516,6 @@ namespace larcv {
         }
         */
         grp.part.group_id(group_id);
-        LARCV_DEBUG() << "*****----- track ancestor "<< mct.AncestorStart().X()  << ", "<<mct.AncestorStart().Y()  << ", "<<mct.AncestorStart().Z() << std::endl;
         if(grp.first_pt.t == larcv::kINVALID_DOUBLE && mct.size())
           grp.part.first_step(mct.front().X(),mct.front().Y(),mct.front().Z(),mct.front().T());
         if(grp.last_pt.t == larcv::kINVALID_DOUBLE && mct.size())
@@ -1476,6 +1551,7 @@ namespace larcv {
       for(size_t output_index=0; output_index<output2trackid.size(); ++output_index) {
         int output_trackid = output2trackid[output_index];
         auto& grp = part_grp_v[output_trackid];
+        std::cout<< "**-- Filling track daugter info, output ind :  " << output_index << " , output id : "<< output_trackid << std::endl;
         if((int)(grp.part.parent_track_id()) != track_id) continue;
         //group ID should not be distinct for track children
         /*
@@ -1909,6 +1985,7 @@ namespace larcv {
       }
       auto const& ancestor = larmcp_v[ancestor_index];
       larcv::Vertex apos (ancestor.Vx(),ancestor.Vy(),ancestor.Vz(),ancestor.T());
+      std::cout<<"**-- ancestor vertex : " << ancestor.Vx() << " , " << ancestor.Vy() << " , " << ancestor.Vz() << std::endl;
       int aid = -1;
       for(size_t iid=0; iid<int2vtx.size(); ++iid)
       {
@@ -2072,7 +2149,7 @@ namespace larcv {
              << semantic << " pixel count " << grp.vs.size()
              << " (not kShapeLEScatter) at line " << __LINE__
              << std::endl;
-        std::cout<<grp.part.dump()<<std::endl;
+        //std::cout<<grp.part.dump()<<std::endl;
         throw std::exception();
       }
       int trackid = grp.part.parent_track_id();
@@ -2519,10 +2596,8 @@ namespace larcv {
     // parent position
     // ancestor track id
     // ancestor position
-    LARCV_DEBUG() << "***---- track_id " << larmcp.TrackId() << " mother " << larmcp.Mother() << " shape " << larcv::kShapeShower <<
+    std::cout << "***---- track_id " << larmcp.TrackId() << " mother " << larmcp.Mother() << " shape " << larcv::kShapeShower <<
     " first_step ParticleCluster " << larmcp.Vx() << " , " << larmcp.Vy() << " , " << larmcp.Vz() << "," << 
-
-    
     std::endl;
     return res;
   }
diff --git a/SuperaMCParticleClusterData.h b/SuperaMCParticleClusterData.h
index 25144e3..2758271 100644
--- a/SuperaMCParticleClusterData.h
+++ b/SuperaMCParticleClusterData.h
@@ -121,6 +121,15 @@ namespace supera {
       for(auto const& pt : child.start.pts)
 	this->AddEDep(pt);
       */
+      std::cout<<"child.first_pt x,y,z,t last_pt x,y,z,t : "
+      << child.first_pt.x << ", "
+      << child.first_pt.y << ", "
+      << child.first_pt.z << ", "
+      << child.first_pt.t << ", "
+      << child.last_pt.x << ", "
+      << child.last_pt.y << ", "
+      << child.last_pt.z << ", "
+      << child.last_pt.t << ", "<<std::endl;
       this->AddEDep(child.last_pt);
       this->AddEDep(child.first_pt);
       this->trackid_v.push_back(child.part.track_id());
diff --git a/job/run_mpvmpr.fcl b/job/run_mpvmpr.fcl
index afa6266..8dfc2c7 100644
--- a/job/run_mpvmpr.fcl
+++ b/job/run_mpvmpr.fcl
@@ -141,7 +141,8 @@ physics.producers.largeant.KeepParticlesInVolumes: [ "volCryostat" ] # keep part
 physics.producers.mcreco.SimEnergyDepositLabel: "largeant:TPCActive"
 physics.producers.mcreco.SimChannelLabel: "largeant:TPCActive"
 physics.producers.mcreco.MCParticleLabel: "largeant"
-physics.producers.mcreco.UseSimEnergyDeposit: true
+physics.producers.mcreco.UseSimEnergyDeposit: false
+physics.producers.mcreco.UseSimEnergyDepositLite: true
 physics.producers.mcreco.MCRecoPart.SavePathPDGList: [13,-13,211,-211,111,311,310,130,321,-321,2212,2112,2224,2214,2114,1114,3122,1000010020,1000010030,1000020030,1000020040]
 
 #
diff --git a/job/supera_sbnd.fcl b/job/supera_sbnd.fcl
index 1b1915f..d00002b 100644
--- a/job/supera_sbnd.fcl
+++ b/job/supera_sbnd.fcl
@@ -59,14 +59,15 @@ ProcessDriver: {
       #LArMCMiniPartProducer: "largeant"
       DeltaSize: 10
       #LArSimEnergyDepositProducer: "largeant TPCActive"
+      LArSimEnergyDepositProducer: "ionandscintout"
       LArSimEnergyDepositLiteProducer: "sedlite"
       Meta3DFromCluster3D: "mcst"
       Meta2DFromTensor2D:  ""
-      Verbosity: 0
-      UseSimEnergyDeposit: false
+      Verbosity: 2
+      UseSimEnergyDeposit: true
       UseSimEnergyDepositLite: true
       UseSimEnergyDepositPoints: true
-      #UseOrigTrackID: false
+      UseOrigTrackID: true
       CryostatList: [0,0]
       TPCList: [0,1]
       PlaneList: []
@@ -75,7 +76,7 @@ ProcessDriver: {
       SuperaTrue2RecoVoxel3D: {
         DebugMode: true
         Profile: true
-        Verbosity: 0
+        Verbosity: 2
         Meta3DFromCluster3D: "pcluster"
         LArSimChProducer: "simdrift"
         LArSpacePointProducers: ["cluster3d"]
